// Generated by gencpp from file playground/coords.msg
// DO NOT EDIT!


#ifndef PLAYGROUND_MESSAGE_COORDS_H
#define PLAYGROUND_MESSAGE_COORDS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace playground
{
template <class ContainerAllocator>
struct coords_
{
  typedef coords_<ContainerAllocator> Type;

  coords_()
    : robot_x(0.0)
    , robot_y(0.0)
    , robot_theta(0.0)
    , ball_x(0.0)
    , ball_y(0.0)  {
    }
  coords_(const ContainerAllocator& _alloc)
    : robot_x(0.0)
    , robot_y(0.0)
    , robot_theta(0.0)
    , ball_x(0.0)
    , ball_y(0.0)  {
    }



   typedef double _robot_x_type;
  _robot_x_type robot_x;

   typedef double _robot_y_type;
  _robot_y_type robot_y;

   typedef double _robot_theta_type;
  _robot_theta_type robot_theta;

   typedef double _ball_x_type;
  _ball_x_type ball_x;

   typedef double _ball_y_type;
  _ball_y_type ball_y;




  typedef boost::shared_ptr< ::playground::coords_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::playground::coords_<ContainerAllocator> const> ConstPtr;

}; // struct coords_

typedef ::playground::coords_<std::allocator<void> > coords;

typedef boost::shared_ptr< ::playground::coords > coordsPtr;
typedef boost::shared_ptr< ::playground::coords const> coordsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::playground::coords_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::playground::coords_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace playground

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'playground': ['/home/ecestudent/dev/frame/ros/src/playground/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::playground::coords_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::playground::coords_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::playground::coords_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::playground::coords_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::playground::coords_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::playground::coords_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::playground::coords_<ContainerAllocator> >
{
  static const char* value()
  {
    return "92e73cedfd0c1f1a450dee8e234adf07";
  }

  static const char* value(const ::playground::coords_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x92e73cedfd0c1f1aULL;
  static const uint64_t static_value2 = 0x450dee8e234adf07ULL;
};

template<class ContainerAllocator>
struct DataType< ::playground::coords_<ContainerAllocator> >
{
  static const char* value()
  {
    return "playground/coords";
  }

  static const char* value(const ::playground::coords_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::playground::coords_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 robot_x\n\
float64 robot_y\n\
float64 robot_theta\n\
float64 ball_x\n\
float64 ball_y\n\
";
  }

  static const char* value(const ::playground::coords_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::playground::coords_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_x);
      stream.next(m.robot_y);
      stream.next(m.robot_theta);
      stream.next(m.ball_x);
      stream.next(m.ball_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct coords_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::playground::coords_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::playground::coords_<ContainerAllocator>& v)
  {
    s << indent << "robot_x: ";
    Printer<double>::stream(s, indent + "  ", v.robot_x);
    s << indent << "robot_y: ";
    Printer<double>::stream(s, indent + "  ", v.robot_y);
    s << indent << "robot_theta: ";
    Printer<double>::stream(s, indent + "  ", v.robot_theta);
    s << indent << "ball_x: ";
    Printer<double>::stream(s, indent + "  ", v.ball_x);
    s << indent << "ball_y: ";
    Printer<double>::stream(s, indent + "  ", v.ball_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLAYGROUND_MESSAGE_COORDS_H
